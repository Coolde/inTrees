library('xgboost')
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
class(train$label)
class(train$data)
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 1, nround = 2, nthread = 2, objective = "binary:logistic")
bst
bst.clf._Booster.get_dump()
bst.get_dump()
xgb.dump(bst, with.stats = T)
bst.str <- xgb.dump(bst, with.stats = T)
bst.str <- xgb.dump(bst, with_stats = T)
bst.str
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 2, nround = 2, nthread = 2, objective = "binary:logistic")
bst.str <- xgb.dump(bst, with_stats = T)
bst.str
bst.str <- xgb.dump(bst, with_stats=F)
bst.str
bst
bst
bst[1]
bst[2]
bst[0]
bst[[0]]
summar(bst)
summary(bst)
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 20, nround = 2, nthread = 2, objective = "binary:logistic")
bst.str <- xgb.dump(bst, with_stats=F)
bst.str
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 20, nround = 20, nthread = 20, objective = "binary:logistic")
bst.str <- xgb.dump(bst, with_stats=F)
bst.str
train$data
colnames(train$data)
bst.str
library(inTrees)
library(randomForest)
data(iris)
X <- iris[, 1:(ncol(iris) - 1)]  # X: predictors
target <- iris[,"Species"]  # target: class
rf <- randomForest(X, as.factor(target))
treeList <- RF2List(rf)  # transform rf object to an inTrees' format
exec <- extractRules(treeList, X)  # R-executable conditions
exec[1:2,]
library(inTrees)
library(randomForest)
data(iris)
X <- iris[, 1:(ncol(iris) - 1)]  # X: predictors
target <- iris[,"Species"]  # target: class
rf <- randomForest(X, as.factor(target))
treeList <- RF2List(rf)  # transform rf object to an inTrees' format
exec <- extractRules(treeList, X)  # R-executable conditions
exec[1:2,]
ruleMetric <- getRuleMetric(exec,X,target)  # get rule metrics
ruleMetric[1:2,]
ruleMetric <- pruneRule(ruleMetric, X, target)
ruleMetric[1:2,]
(ruleMetric <- selectRuleRRF(ruleMetric, X, target))
(learner <- buildLearner(ruleMetric, X, target))
readableRules <- presentRules(ruleMetric, colnames(X))
readableRules[1:2, ]
rf <- randomForest(X, as.factor(target))
treeList <- RF2List(rf)  # transform rf object to an inTrees' format
exec <- extractRules(treeList, X)  # R-executable conditions
ruleMetric <- getRuleMetric(exec, X, target)  # get rule metrics
freqPattern <- getFreqPattern(ruleMetric)
# interactions of at least two predictor variables
freqPattern[which(as.numeric(freqPattern[, "len"]) >= 2), ][1:4, ]
X <- iris[, 1:(ncol(iris) - 1)]  # X: predictors
target <- iris[,"Species"]  # target: class
bst <- xgboost(data = X, label = target, max.depth = 2,
eta = 20, nround = 20, nthread = 20, objective = "binary:logistic")
bst <- xgboost(data = as.matrix(X), label = target, max.depth = 2,
eta = 20, nround = 20, nthread = 20, objective = "binary:logistic")
target
as.matrix(X)
train
bst
bst.str
length(bst.str)
regexprbst.str
bst.str[1]
regexpr( "booster", bst.str[1]   )
regexpr( "^booster", bst.str[1]   )
regexpr( "^booster$", bst.str[1]   )
regexpr( "^booster[.*]", bst.str[1] )
regexpr( "^booster[", bst.str[1] )
regexpr( "^booster\\[", bst.str[1] )
regexpr( "^booster\\[.*", bst.str[1] )
regexpr( "^booster\\[.*]", bst.str[1] )
regexpr( "^booster\\[.*\\]$", bst.str[1] )
regexpr( "leaf=", bst.str[4] )
regexpr( "^.*", bst.str[2] )
node.num <- regexpr( "^.*", bst.str[2] )
node.num
node.num[1]
node.num[2]
summary(node.num)
node.num$match.length
node.num["match.length"]
node.num
attr(match.length)
attr(node.num,match.length)
attr(node.num)
attr(node.num,"match.length")
node.num <- regexpr( "^.*", bst.str[2] )
substr( bst.str[2], node.num, attr(node.num,"match.length") )
node.num <- regexpr( "^.*:", bst.str[2] )
node.num
node.num <- regexpr( "^.*:", bst.str[2] )
substr( bst.str[2], node.num, attr(node.num,"match.length") )
node.num <- regexpr( "^.*:", bst.str[2] )
node.num <- substr( bst.str[2], node.num, attr(node.num,"match.length") - 1)
node.num
bst.str[2]
feature.index <- regexpr( "\\[f.*<", bst.str[2] )
feature.index
feature.index <- regexpr( "\\[f[[:digit:]]*<", bst.str[2] )
feature.index
feature.index <- substr( bst.str[2], feature.index, attr(feature.index,"match.length") - 1)
feature.index
feature.index <- regexpr( "\\[f[[:digit:]]*<", bst.str[2] )
feature.index <- substr( bst.str[2], feature.index + 1, attr(feature.index,"match.length") - 1)
feature.index
feature.index
feature.index <- regexpr( "\\[f[[:digit:]]*<", bst.str[2] )
bst.str[2]
feature.index
feature.index <- substr( bst.str[2], feature.index + 1, attr(feature.index,"match.length") )
feature.index
node.index <- regexpr( "^.*:", bst.str[2] )
node.index <- substr( bst.str[2], node.index, feature.index + attr(node.index,"match.length") - 1)
node.index <- regexpr( "^.*:", bst.str[2] )
node.index <- substr( bst.str[2], node.index, node.index + attr(node.index,"match.length") - 1)
node.index
node.index <- regexpr( "^.*:", bst.str[2] )
node.dinex
node.index
bst.str[2]
substr( bst.str[2], node.index, node.index + attr(node.index,"match.length") )
node.index <- regexpr( "^.*:", bst.str[2] )
node.index <- substr( bst.str[2], node.index, node.index + attr(node.index,"match.length") - 2 )
node.index
feature.index <- regexpr( "\\[f[[:digit:]]*<", bst.str[2] )
feature.index <- substr( bst.str[2], feature.index + 1, feature.index + attr(feature.index,"match.length") - 1 )
feature.index
# decision variable
feature.index <- regexpr( "\\[f[[:digit:]]*<", bst.str[2] )
feature.index <- substr( bst.str[2], feature.index + 2, feature.index + attr(feature.index,"match.length") - 2 )
feature.index
left.index <- regexpr( "yes=.*,", bst.str[2] )
left.index
left.index <- regexpr( "yes=[[:digit:]]*,", bst.str[2] )
left.index
left.index <- regexpr( "yes=[[:digit:]]*,", bst.str[2] )
left.index <- substr( bst.str[2], left.index + 2, left.index + attr(left.index,"match.length") - 2 )
left.index
right.index <- regexpr( "no=[[:digit:]]*,", bst.str[2] )
right.index <- substr( bst.str[2], right.index + 4, right.index + attr(right.index,"match.length") - 2 )
right.index
right.index <- regexpr( "no=[[:digit:]]*,", bst.str[2] )
right.index
bst.str[2]
right.index <- regexpr( "no=[[:digit:]]*,", bst.str[2] )
right.index <- substr( bst.str[2], right.index + 3, right.index + attr(right.index,"match.length") - 2 )
right.index
bst.str[2]
split.value <- regexpr( "\\<.*]", bst.str[2] )
split.value <- substr( bst.str[2], split.value + 1, split.value + attr(split.value,"match.length") - 2 )
split.value
split.value <- regexpr( "<.*]", bst.str[2] )
split.value <- substr( bst.str[2], split.value + 1, split.value + attr(split.value,"match.length") - 2 )
split.value
as.numeric(split.value)
as.numeric(split.value) + 1
bst.str <- xgb.dump(bst, with_stats=F)
tree.mat <- NULL
tree.mat <- rbind(as.numeric(split.value),1)
tree.mat
regexpr( "^booster\\[.*\\]$", bst.str[1] )
regexpr( "^bofoster\\[.*\\]$", bst.str[1] )
bst.str
node.index <- regexpr( "^.*:", bst.str[2] )
node.index <- substr( bst.str[2], node.index, node.index + attr(node.index,"match.length") - 2 )
node.index
library(randomForest)
rf <- randomForest(Species ~ ., data=iris)
getTree(rf, 1, labelVar=TRUE)
