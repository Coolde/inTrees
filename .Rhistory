}
}
sourceDir("devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
sourceDir("devR/")
tree_list <- Ranger2List(rf_ranger)
tree_list
Ranger2List
sourceDir("devR/")
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Species ~ ., data = iris)
tree_list <- Ranger2List(rf_ranger)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
# freq_patterns <- getFreqPattern(rule_metric,maxlen = 3) # can be less useful for numeric variables.
rule_metric <- pruneRule(rule_metric,X,Y,typeDecay = 1)
rule_select <- selectRuleRRF(rule_metric, X, Y)
rule_metric <- unique(rule_metric)
rule_classifier <- buildLearner(rule_metric,X,Y)
readable <- presentRules(rule_classifier,colnames(X),digits=3)
pred <- applyLearner(rule_classifier,X)
print(readable)
print( 1-sum(pred==Y)/length(pred) )
X
tree_list
rf_ranger
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Species ~ ., data = data)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
# freq_patterns <- getFreqPattern(rule_metric,maxlen = 3) # can be less useful for numeric variables.
rule_metric <- pruneRule(rule_metric,X,Y,typeDecay = 1)
rule_select <- selectRuleRRF(rule_metric, X, Y)
rule_metric <- unique(rule_metric)
rule_classifier <- buildLearner(rule_metric,X,Y)
readable <- presentRules(rule_classifier,colnames(X),digits=3)
pred <- applyLearner(rule_classifier,X)
print(readable)
print( 1-sum(pred==Y)/length(pred) )
rm(list= ls())
library(ranger)
library(inTrees)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
# freq_patterns <- getFreqPattern(rule_metric,maxlen = 3) # can be less useful for numeric variables.
rule_metric <- pruneRule(rule_metric,X,Y,typeDecay = 1)
rule_select <- selectRuleRRF(rule_metric, X, Y)
rule_metric <- unique(rule_metric)
rule_classifier <- buildLearner(rule_metric,X,Y)
readable <- presentRules(rule_classifier,colnames(X),digits=3)
pred <- applyLearner(rule_classifier,X)
print(readable)
print( 1-sum(pred==Y)/length(pred) )
selectRuleRRF
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
# freq_patterns <- getFreqPattern(rule_metric,maxlen = 3) # can be less useful for numeric variables.
rule_metric <- pruneRule(rule_metric,X,Y,typeDecay = 1)
rule_select <- selectRuleRRF(rule_metric, X, Y)
rule_metric <- unique(rule_metric)
rule_classifier <- buildLearner(rule_metric,X,Y)
readable <- presentRules(rule_classifier,colnames(X),digits=3)
pred <- applyLearner(rule_classifier,X)
print(readable)
print( 1-sum(pred==Y)/length(pred) )
debug(getRuleMetric)
rule_metric <- getRuleMetric(rule_exec,X,Y)
dIx
ruleMetric[1:3,]
ruleExec[1:2,]
X[,1] %in% c('0DM','no-account','over-200DM') & X[,4] %in% c(' domestic-app') & X[,7] %in% c(' over-seven') & X[,14] %in% c(' bank')
tree_list
X[,1] %in% c('0DM','no-account','over-200DM') & X[,4] %in% c(' domestic-app') & X[,7] %in% c(' over-seven') & X[,14] %in% c(' bank')
tree_list$list[[1]]
tree_list$list[[2]]
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
tree_list$list[[1]]
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
rf_ranger
tree_list <- Ranger2List(rf_ranger)
tree_list$list[[1]]
rm(list= ls())
library(randomForest)
library(inTrees)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf <- randomForest(X, as.factor(Y),ntree=100)
rf <- randomForest(X, as.factor(Y),ntree=100)
tree_list <- RF2List(rf)
tree_list$list[[1]]
X[,15]
rule_exec <- extractRules(tree_list,X,digits=3)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
# freq_patterns <- getFreqPattern(rule_metric,maxlen = 3) # can be less useful for numeric variables.
rule_metric <- pruneRule(rule_metric,X,Y,typeDecay = 1)
rule_select <- selectRuleRRF(rule_metric, X, Y)
rule_metric <- unique(rule_metric)
rule_classifier <- buildLearner(rule_metric,X,Y)
readable <- presentRules(rule_classifier,colnames(X),digits=3)
pred <- applyLearner(rule_classifier,X)
print( 1-sum(pred==Y)/length(pred) )
rf
data[1:3,]
tree_list$list[[1]]
debug(treeVisit)
rule_exec[1:3,]
which(X[,1] %in% c('no-account') & X[,4] %in% c(' education',' new-car') & X[,6] %in% c(' less500DM',' unknown') & X[,13]<=44.5)
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
rule_exec <- extractRules(tree_list,X,digits=10)
tree
xIx
levelX[[xIx]]
as.integer(xValue)
xValue
xValue <- which(as.integer(intToBits(as.integer(xValue))) >
0)
xValue
intToBits(as.integer(xValue))
lValue <- levelX[[xIx]][xValue]
rValue <- setdiff(levelX[[xIx]], lValue)
lValue
rValue
undebug(treeVisit)
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec[1:3,]
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
debug(getRuleMetric)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
dIx
ruleMetric[23,]
which(X[,1] %in% c('less-200DM'))
which(X[,1] %in% c('less-200DM') & X[,3] %in% c(' all-paid-duly',' critical',' delay',' duly-till-now') )
which(X[,1] %in% c('less-200DM') & X[,3] %in% c(' all-paid-duly',' critical',' delay',' duly-till-now') & X[,6] %in% c(' less1000DM',' less100DM') & X[,12] %in% c(' building-society',' car') )
which(X[,1] %in% c('less-200DM') & X[,3] %in% c(' all-paid-duly',' critical',' delay',' duly-till-now') & X[,6] %in% c(' less1000DM',' less100DM') & X[,12] %in% c(' building-society',' car') & X[,13]>25.5 & X[,19] %in% c(' no'))
dIx
ruleMetric <- t(sapply(ruleExec[, "condition", drop = FALSE],
measureRule, X, target))
rownames(ruleMetric) = NULL
colnames(ruleMetric) <- c("len", "freq", "err", "condition",
"pred")
dIx <- which(ruleMetric[, "len"] == "-1")
dIx
ruleMetric[23,]
ruleExec[23,]
which(X[,1] %in% c('0DM','no-account','over-200DM'))
"X[,1] %in% c('0DM','no-account','over-200DM') & X[,2]<=17 & X[,3] %in% c(' bank-paid-duly') & X[,4] %in% c(' business',' education') & X[,5]<=7668.5 & X[,9] %in% c(' male-divorced')"
which(X[,1] %in% c('0DM','no-account','over-200DM') & X[,2]<=17 & X[,3] %in% c(' bank-paid-duly') )
which(X[,1] %in% c('0DM','no-account','over-200DM') & X[,2]<=17 & X[,3] %in% c(' bank-paid-duly') & X[,4] %in% c(' business',' education'))
X[,5]
which(X[,1] %in% c('0DM','no-account','over-200DM') & X[,2]<=17 & X[,3] %in% c(' bank-paid-duly') & X[,4] %in% c(' business',' education') & X[,5]<=7668.5)
which(X[,1] %in% c('0DM','no-account','over-200DM') & X[,2]<=17 & X[,3] %in% c(' bank-paid-duly') & X[,4] %in% c(' business',' education') & X[,5]<=7668.5 & X[,9] %in% c(' male-divorced'))
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
undebug(getRuleMetric)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
rule_metric[1:10,]
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
# freq_patterns <- getFreqPattern(rule_metric,maxlen = 3) # can be less useful for numeric variables.
rule_metric <- pruneRule(rule_metric,X,Y,typeDecay = 1)
rule_select <- selectRuleRRF(rule_metric, X, Y)
rule_metric <- unique(rule_metric)
rule_classifier <- buildLearner(rule_metric,X,Y)
readable <- presentRules(rule_classifier,colnames(X),digits=3)
pred <- applyLearner(rule_classifier,X)
print(readable)
324/4145
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf <- randomForest(X, as.factor(Y),ntree=100)
tree_list <- RF2List(rf)
rule_exec <- extractRules(tree_list,X,digits=3)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
rule_metrics
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
rule_exec <- extractRules(tree_list,X,digits=10)
rule_exec <- unique(rule_exec) # remove same rules. NOTE: for variable interaction analysis, you should NOT perform this step
ix <- sample(1:length(rule_exec),min(2000,length(rule_exec))) #randomly select 2000 rules
rule_exec <- rule_exec[ix,,drop=FALSE]
rule_metric <- getRuleMetric(rule_exec,X,Y)
# freq_patterns <- getFreqPattern(rule_metric,maxlen = 3) # can be less useful for numeric variables.
rule_metric <- pruneRule(rule_metric,X,Y,typeDecay = 1)
rule_select <- selectRuleRRF(rule_metric, X, Y)
rule_metric <- unique(rule_metric)
rule_metric <- getRuleMetric(rule_exec,X,Y)
dim(rule_exec)
rule_metric <- getRuleMetric(rule_exec[1:10,],X,Y)
rule_exec
dim(rule_exec)
rule_exec[1:10]
rule_metric <- getRuleMetric(rule_exec[1:10],X,Y)
rule_metric <- getRuleMetric(rule_exec[1:10,,drop=FALSE],X,Y)
rule_exec
rule_metric <- getRuleMetric(rule_exec[1:2,,drop=FALSE],X,Y)
rule_metric <- getRuleMetric(rule_exec[1,,drop=FALSE],X,Y)
rule_exec[1,,drop=FALSE]
which(X[,1] %in% c('0DM','no-account','over-200DM') & X[,4] %in% c(' domestic-app') & X[,7] %in% c(' over-seven') & X[,14] %in% c(' bank'))
tree_list
rf_ranger[1]
tree_list$list[[1]]
debug_tree_list <- list()
debug_tree_list$ntree <- 1
debug_tree_list$list <- tree_list$list[[1]]
debug_tree_list
debug_tree_list <- list()
debug_tree_list$ntree <- 1
debug_tree_list$list <- tree_list$list[[1]]
rule_exec <- extractRules(debug_tree_list,X,digits=10)
?Ranger2List
Ranger2List
debug_tree_list <- list()
debug_tree_list$ntree <- 1
debug_tree_list$list[[1]] <- tree_list$list[[1]]
debug_tree_list
rule_exec <- extractRules(debug_tree_list,X,digits=10)
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
set.seed(1)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
debug_tree_list <- list()
debug_tree_list$ntree <- 1
debug_tree_list$list[[1]] <- tree_list$list[[1]]
rule_exec <- extractRules(debug_tree_list,X,digits=10)
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
set.seed(1)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
debug_tree_list <- list()
debug_tree_list$ntree <- 1
debug_tree_list$list[[1]] <- tree_list$list[[2]]
rule_exec <- extractRules(debug_tree_list,X,digits=10)
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
set.seed(1)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
for(i in 1:2){
debug_tree_list <- list()
debug_tree_list$ntree <- 1
debug_tree_list$list[[1]] <- tree_list$list[[2]]
rule_exec <- extractRules(debug_tree_list,X,digits=10)
rule_metric <- getRuleMetric(rule_exec,X,Y)
}
rm(list= ls())
library(ranger)
library(inTrees)
library(RRF)
set.seed(1)
sourceDir <- function(path, trace = TRUE) {
for (nm in list.files(path, pattern = "\\.[Rr]$")) {
if(trace) cat(nm)
source(file.path(path, nm))
if(trace) cat("\n")
}
}
sourceDir("Test/devR/")
# data 1
X <- within(iris,rm("Species")); Y <- iris[,"Species"]
rf_ranger <- ranger(Species ~ ., data = iris)
# data set 2
path <- paste(getwd(), "/Test/data/german.data",sep="") #musk vehicle is good austra
data <- read.table(path,header=TRUE,sep = ",")
X <- within(data,rm("Y")); Y <- data$Y
rf_ranger <- ranger(Y ~ ., data = data)
tree_list <- Ranger2List(rf_ranger)
debug_tree_list <- list()
debug_tree_list$ntree <- 1
debug_tree_list$list[[1]] <- tree_list$list[[1]]
rule_exec <- extractRules(debug_tree_list,X,digits=10)
rule_metric <- getRuleMetric(rule_exec,X,Y)
rule_exec
rule_metric <- getRuleMetric(rule_exec,X,Y)
rule_metric <- getRuleMetric(rule_exec[1,,drop=FALSE],X,Y)
rule_exec[1,,drop=FALSE]
which(X[,1] %in% c('less-200DM') & X[,3] %in% c(' bank-paid-duly') & X[,6] %in% c(' less100DM') & X[,12] %in% c(' car') & X[,13]<=51 & X[,13]<=44.5)
tree_list$list[[1]]
Ranger2List
orig_tree <- treeInfo(rf_ranger, tree = 1)
orig_tree
print(rule_exec[1,,drop=FALSE])
print( tree_list$list[[1]])
print( tree_list$list[[1]][1:10,])
print(rule_exec[1,,drop=FALSE])
extractRules
treeVisit
rule_exec
print( tree_list$list[[1]][1:10,])
print("the first rule from the tree (top down and most left)")
print(rule_exec[1,,drop=FALSE])
print( tree_list$list[[1]][1:15,])
print( tree_list$list[[1]][1:55,])
print(rule_exec[1,,drop=FALSE])
print( tree_list$list[[1]][1:55,])
which(X[,1] %in% c('less-200DM') & X[,3] %in% c(' bank-paid-duly') & X[,6] %in% c(' less100DM') & X[,12] %in% c(' car') & X[,13]<=51)
which(X[,1] %in% c('less-200DM') & X[,3] %in% c(' bank-paid-duly') & X[,6] %in% c(' less100DM') & X[,12] %in% c(' car') )
which(X[,1] %in% c('less-200DM') & X[,3] %in% c(' bank-paid-duly') & X[,6] %in% c(' less100DM') )
summary(X[,12])
which(X[,12] %in% c(' car'))
print(orig_tree[1:55,])
print( tree_list$list[[1]][1:55,])
print("original tree structure")
print(orig_tree[1:55,])
print(rule_exec[1,,drop=FALSE])
print("converted tree structure from ranger.")
print( tree_list$list[[1]][1:55,])
print(orig_tree[1:55,])
save.image("intrees_ranger_debug.RData")
